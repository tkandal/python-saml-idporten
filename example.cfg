[app]
host = localhost
port= 9999

[saml]
# Entity id for service provider.
# Hint: this is EntityDescriptor.entityID in sp metadata xml from idporten.
issuer =

# Idporten uses persistent format when verifying identity
name_identifier_format = urn:oasis:names:tc:SAML:2.0:nameid-format:persistent

# The SAML Consumer URL from your the your app
# Hint: this is AssertionConsumerService.Location in the sp metadata xml from idporten.
assertion_consumer_service_url =

# The SAML Login URL at idporten's server.
# Hint: This the SingleSignOnService.Location where Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect" in the idp metadata xml from idporten.
idp_sso_target_url =

# The SAML Logout URL at idporten's server
# Hint: This is the SingleLogoutService.Location where Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect"
logout_target_url =

# The x.509 certificate file from IDporten as a file path.
# Hint: filename should look something like this: idporten-ver2.difi.no-v2.crt
idp_cert_file =

# Fingerprint
idp_cert_fingerprint =

# Full path to the service provider's private server key.
private_key_file =

# SAML Artifact resolver URL at idporten's server.
# Hint: This is the element:                                  
# ArtifactResolutionService Binding="urn:oasis:names:tc:SAML:2.0:bindings:SOAP"
# In the metadata-file for ID-porten.
artifact_resolver_url =

# SAML assertion binding,- e.g. how to get the assertion.  Either get it posted
# from idporten's server or use SOAP to fetch the assertion from ID-porten's
# server at the  URL defined in "artifact_resolver_url".
# Possible values: HTTP-POST or HTTP-Artifact
# If not defined, the library will default to HTTP-Artifact
sp_assertion_binding =
